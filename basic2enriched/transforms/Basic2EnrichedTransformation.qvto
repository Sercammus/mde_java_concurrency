modeltype BasicModel uses BasicModel;
modeltype EnrichedModel uses EnrichedModel;

transformation Basic2EnrichedTransformation(in basicModel : BasicModel, out enrichedModel: EnrichedModel);

property defaultInstanceType: EnrichedModel::InstanceType;

main() {
	basicModel.rootObjects()[BasicModel::BasicModel]->asOrderedSet()->first()-> map model2model();
}

mapping BasicModel::BasicModel::model2model() : EnrichedModel::EnrichedModel {
	
	//Create a list of instance types (= classes)
	//Start by create the class with the program entry point
	//'Main' and 'main' are invalid reference/activity names in the basic model to allow for this class
	//The class also contains any shared resources (excepting threads)
	init {
		defaultInstanceType := object EnrichedModel::InstanceType {
			name := 'Main';
		};
	}
	
	//This is easy, because all of these things we will refer to later and not the other way around
	instanceTypes+=defaultInstanceType;
	instanceTypes+=self.instanceTypes->map instanceType2instanceType();
	methodParameters+=self.instances->map instance2instance();
	methodParameters+=self.resources->map sharedResource2sharedResource();
	
	//Transform all nested threads
	//Note that states must late-resolve nested threads because nested threads transform states that refer to nested threads! 
	self.nestedThreads->map nestedThread2method();
	
	//Create the main method from the main thread (and all threads that spawn from it, recursively)
	defaultInstanceType.methods += object EnrichedModel::Method {
		name := "main";
		startStateId := self.startActivity.stateId;
		states := self.activities->map activity2state();
		isStatic := true;
	};
	
	//Make it possible to interrupt the main thread
	self.map interruptableThread2thread();
	
	//Make a list of all method parameters that were used
	methodParameters += BasicModel::InterruptableThread.allInstances().resolveIn(BasicModel::Thread::interruptableThread2thread, EnrichedModel::Thread);
	
	end {
		
	}
}

//Instance type
mapping BasicModel::InstanceType::instanceType2instanceType() : EnrichedModel::InstanceType {
	name := self.name;
}

//Instance
mapping BasicModel::Instance::instance2instance() : EnrichedModel::Instance {
	name := self.name;
	instanceType := self.instanceType.resolveoneIn(BasicModel::InstanceType::instanceType2instanceType, EnrichedModel::InstanceType);
}

//Shared resource
mapping BasicModel::SharedResource::sharedResource2sharedResource() : EnrichedModel::SharedResource {
	name := self.name;
}

//Activity
mapping BasicModel::Activity::activity2state() : EnrichedModel::State disjuncts
	BasicModel::SimpleActivity::simpleActivity2state, BasicModel::NestedActivity::nestedActivity2state,
	BasicModel::Sleep::sleepActivity2state, BasicModel::Yield::yieldActivity2state,
	BasicModel::Interrupt::interruptActivity2state, BasicModel::Decision::decisionActivity2state,
	BasicModel::Fork::forkActivity2state, BasicModel::Join::joinActivity2state
{}

//Linear activitiy
abstract mapping BasicModel::LinearActivity::linearActivity2state() : EnrichedModel::State {
	id := self.stateId;
	
	if (self.canJumpTo(self.nextActivity)) then {
		jumps := Sequence{self.nextActivity}->map nextActivity2jump();
	} else {
		jumps := Sequence{};
	} endif;
}

query BasicModel::Activity::canJumpTo(nextActivity : BasicModel::Activity) : Boolean {
	//Do not jump to an end activity (since it does not do anything anyway)
	if (nextActivity.oclIsKindOf(BasicModel::End)) then {
		return false;
	} endif;
	
	//Only go to a join if we are currently in the thread that is supposed to join
	if (nextActivity.oclIsKindOf(BasicModel::Join)) then {
		return nextActivity.thread = self.thread;
	} endif;
	
	//Jump to the next activity in all other cases
	return true;
}

mapping BasicModel::Activity::nextActivity2jump() : EnrichedModel::Jump {
	nextState := self.map activity2state();
}

//Simple activity
mapping BasicModel::SimpleActivity::simpleActivity2state() : EnrichedModel::MethodCallState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::SimpleActivity) }
{
	if (self.instance != null) then {
		targetInstance := self.instance.map instance2instance();
	} endif;
	
	//Determine in which instance type (= class) the method must be placed
	var it = if self.instanceType = null then defaultInstanceType else self.instanceType.resolveoneIn(BasicModel::InstanceType::instanceType2instanceType, EnrichedModel::InstanceType) endif;
	
	//Determine whether a method with the same name already exists in that instance type 
	var methodsWithSameName := it.methods->select(e | e.name = self.activityName);
	
	if (methodsWithSameName->isEmpty()) {
		calledMethod := object EnrichedModel::Method {
			name := self.activityName;
			startStateId := -1;
			parameters := self.accessedReferences.late resolve(EnrichedModel::MethodParameter);
			isStatic := self.instanceType = null;
		};
		it.methods += calledMethod;
	} else {
		calledMethod := methodsWithSameName->first();
	} endif;
}

//Nested activity
mapping BasicModel::NestedActivity::nestedActivity2state() : EnrichedModel::MethodCallState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::NestedActivity) }
{
	//Resolve late, because nested threads also transform states which access (non-existing) nested threads
	calledMethod := self.nestedThread.late resolveoneIn(BasicModel::NestedThread::nestedThread2method, EnrichedModel::Method);
	
	//Resolve (unless static), because instances have already been transformed
	if (self.nestedThread.startActivity.instance != null) {
		targetInstance := self.nestedThread.startActivity.instance.resolveoneIn(BasicModel::Instance::instance2instance, EnrichedModel::Instance);
	} endif;
}

mapping BasicModel::NestedThread::nestedThread2method() : EnrichedModel::Method {
	name := self.name;
	startStateId := self.startActivity.stateId;
	states := self.activities->map activity2state();
	parameters := self.startActivity.accessedReferences.late resolve(EnrichedModel::MethodParameter);
	isStatic := self.startActivity.instanceType = null;
	
	//Place the method in the instance type with the starting activity
	if (isStatic) then {
		defaultInstanceType.methods += result;
	} else {
		self.startActivity.instanceType.resolveoneIn(BasicModel::InstanceType::instanceType2instanceType, EnrichedModel::InstanceType).methods += result;
	} endif;
}

//Sleep
mapping BasicModel::Sleep::sleepActivity2state() : EnrichedModel::SleepState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Sleep) }
{
	duration := self.duration;
}

//Yield
mapping BasicModel::Yield::yieldActivity2state() : EnrichedModel::YieldState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Yield) }
{
	//Do nothing.
}

//Interrupt
mapping BasicModel::Interrupt::interruptActivity2state() : EnrichedModel::InterruptState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Interrupt) }
{
	interruptedThread := self.interruptedThread.late resolveoneIn(BasicModel::Thread::interruptableThread2thread, EnrichedModel::Thread);
}

//Decision
mapping BasicModel::Decision::decisionActivity2state() : EnrichedModel::State
	when { self.oclIsKindOf(BasicModel::Decision) }
{
	id := self.stateId;
	jumps += self.branches->map branch2jump(self);
	
	if (self.canJumpTo(self.nextActivity)) then {
		jumps += Sequence{self.nextActivity}->map nextActivity2jump();
	} endif;
}

mapping BasicModel::Branch::branch2jump(decision : BasicModel::Decision) : EnrichedModel::Jump {
	condition := self.condition;
	
	if (decision.canJumpTo(self.nextActivity)) {
		nextState := self.nextActivity.map activity2state();
	}
}

//Fork
mapping BasicModel::Fork::forkActivity2state() : EnrichedModel::ForkState
	when { self.oclIsKindOf(BasicModel::Fork) }
{
	threadCount := self.maxThreadCount;
	threadInits := self.forkedThreadsUsingThreadInit->map forkedThread2threadInit();
	jumps := self.forkedThreadsUsingJump->map forkedThread2jump();
	id := self.stateId;
}

mapping BasicModel::ForkedThread::forkedThread2threadInit() : EnrichedModel::ThreadInit {
	isDaemon := self.daemon;
	targetInstance := self.startActivity.instance.map instance2instance();
	
	//Create the method that the forked thread will execute
	calledMethod := object EnrichedModel::Method {
		name := self.name;
		startStateId := self.startActivity.stateId;
		states := self.activities->map activity2state();
		parameters := self.startActivity.accessedReferences.late resolve(EnrichedModel::MethodParameter);
		isStatic := self.startActivity.instanceType = null;
	};
	
	//Place the thread method in the instance type with the starting activity
	if (calledMethod.isStatic) then {
		defaultInstanceType.methods += calledMethod; 
	} else {
		self.startActivity.instanceType.resolveoneIn(BasicModel::InstanceType::instanceType2instanceType, EnrichedModel::InstanceType).methods += calledMethod;
	} endif;
	
	//Create reference to the thread (so that is can be interrupted and joined with)
	thread := self.map interruptableThread2thread();
}

mapping BasicModel::ForkedThread::forkedThread2jump() : EnrichedModel::Jump {
	nextState := self.startActivity.map activity2state();
}

mapping BasicModel::Thread::interruptableThread2thread() : EnrichedModel::Thread {
	name := 'var$' + self.name;
}

//Join
mapping BasicModel::Join::joinActivity2state() : EnrichedModel::JoinState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Join) }
{
	joinedThreads += self.actualIncomingThreads.late resolveIn(BasicModel::Thread::interruptableThread2thread, EnrichedModel::Thread);
}


