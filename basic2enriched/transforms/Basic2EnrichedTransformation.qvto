modeltype BasicModel uses BasicModel;
modeltype EnrichedModel uses EnrichedModel;

transformation Basic2EnrichedTransformation(in basicModel : BasicModel, out enrichedModel: EnrichedModel);

property defaultInstanceType: EnrichedModel::InstanceType;
property staticThreads: Set(BasicModel::Thread);

main() {
	basicModel.rootObjects()[BasicModel::BasicModel]->asOrderedSet()->first()-> map model2model();
}

mapping BasicModel::BasicModel::model2model() : EnrichedModel::EnrichedModel {
	
	//Create a list of instance types (= classes)
	//Start by create the class with the program entry point
	//'Main' and 'main' are invalid reference/activity names in the basic model to allow for this class
	//The class also contains any shared resources (excepting threads)
	defaultInstanceType := object EnrichedModel::InstanceType {
		name := 'Main';
	};
	
	staticThreads := Set{};
	
	//This is easy, because all of these things we will refer to later and not the other way around
	instanceTypes+=defaultInstanceType;
	instanceTypes+=self.instanceTypes->map instanceType2instanceType();
	methodParameters+=self.instances->map instance2instance(); //Must be done AFTER instance types!
	methodParameters+=self.resources->map sharedResource2sharedResource();
	
	//Create the main method from the main thread (and all threads that spawn from it, recursively)
	defaultInstanceType.methods += self.map createMainMethod();
	defaultInstanceType.methods += self.map basicModel2method();
	
	//Transform all nested threads
	//Note that states must late-resolve nested threads because nested threads transform states that refer to nested threads! 
	self.nestedThreads->map nestedThread2method();
	
	//Make it possible to interrupt the main thread
	self.map interruptableThread2thread(defaultInstanceType, true);
	
	//Make a list of all method parameters that were used
	methodParameters += BasicModel::InterruptableThread.allInstances().resolveIn(BasicModel::Thread::interruptableThread2thread, EnrichedModel::Thread);
	
	//Create extra method call states for the Join objects that need them
	//We do this here because creating extra states while iterating over them results in errors
	BasicModel::Join.allInstances()->forEach(basicJoin) {
		if (basicJoin.canJumpTo(basicJoin.nextActivity)) then {
			if (basicJoin.nextActivity.thread != basicJoin.thread) {
				var enrichedJoin := basicJoin.resolveone(EnrichedModel::JoinState);
				
				var methodCallState := object EnrichedModel::MethodCallState {
					method := enrichedJoin.method; 
					jumps := OrderedSet{};
					
					//We would not be able to resolve this in the mapping for Joins,
					//and we need its value in order to set calledMethod
					firstState := basicJoin.nextActivity.resolveone(EnrichedModel::State);
					targetInstance := basicJoin.nextActivity.instance.resolveone(EnrichedModel::Instance);
					calledMethod := firstState.method; //Do this after firstState has been resolved!
				};
				
				enrichedJoin.method.states += methodCallState;
				enrichedJoin.jumps := Sequence{object EnrichedModel::Jump {
					nextState := methodCallState;
				}};
			} endif;
		} endif;
	};
	
	//Mark threads that are accessed statically by a Join/Interrupt at least once as static
	staticThreads->forEach(t) {
		t.resolveone(EnrichedModel::Thread).isStatic := true;
	};
	
	//Eliminate method parameters that are not to be EXCLUSIVELY used (such as statically accessed threads)
	EnrichedModel::Method.allInstances()->forEach(m) {
		m.parameters := m.parameters->select(e | not e.isStatic);
	};
	
	//Sort the lockedResources of all methods in the same order as they occur in methodParameters
	EnrichedModel::Method.allInstances()->forEach(m) {
		m.lockedResources->sortedBy(e | Sequence{1..methodParameters->size()}->select(i | methodParameters->at(i) = e)->first());
	};
}

mapping BasicModel::BasicModel::createMainMethod() : EnrichedModel::Method {
	name := "main";
	defaultFirstState := object EnrichedModel::MethodCallState {
		method := result;
		calledMethod := self.late resolveoneIn(BasicModel::BasicModel::basicModel2method, EnrichedModel::Method);
		firstState := self.startActivity.late resolveone(EnrichedModel::State);
	};
	states += defaultFirstState;
	isStatic := true;
}

mapping BasicModel::BasicModel::basicModel2method() : EnrichedModel::Method {
	name := self.name;
	defaultFirstState := self.startActivity.late resolveone(EnrichedModel::State);
	states := self.activities->map activity2state(result);
	isStatic := true;
}

//Instance type
mapping BasicModel::InstanceType::instanceType2instanceType() : EnrichedModel::InstanceType {
	name := self.name;
}

query BasicModel::Activity::getInstanceType() : EnrichedModel::InstanceType {
	return if (self.instanceType = null) then defaultInstanceType else self.instanceType.resolveone(EnrichedModel::InstanceType) endif;
}

//Instance
mapping BasicModel::Instance::instance2instance() : EnrichedModel::Instance {
	name := self.name;
	isStatic := false; //In the future, the user may want to specify this
	
	//Instances are placed in the instance type (= class) equal to the type that they have.
	instanceType := self.instanceType.resolveone(EnrichedModel::InstanceType);
}

//Shared resource
mapping BasicModel::SharedResource::sharedResource2sharedResource() : EnrichedModel::SharedResource {
	name := self.name;
	isStatic := false; //In the future, the user may want to specify this
	
	//Shared resources are placed in the default instance type.
	instanceType := defaultInstanceType;
}

//Activity
mapping BasicModel::Activity::activity2state(m : EnrichedModel::Method) : EnrichedModel::State disjuncts
	BasicModel::SimpleActivity::simpleActivity2state, BasicModel::NestedActivity::nestedActivity2state,
	BasicModel::Sleep::sleepActivity2state, BasicModel::Yield::yieldActivity2state,
	BasicModel::Interrupt::interruptActivity2state, BasicModel::Decision::decisionActivity2state,
	BasicModel::Fork::forkActivity2state, BasicModel::Join::joinActivity2state,
	BasicModel::End::endActivity2state
{}

//End activity
mapping BasicModel::End::endActivity2state(m : EnrichedModel::Method) : EnrichedModel::State {
	method := m;
	jumps := OrderedSet{};
}

//Linear activitiy
abstract mapping BasicModel::LinearActivity::linearActivity2state(m : EnrichedModel::Method) : EnrichedModel::State {
	method := m;
	
	if (self.canJumpTo(self.nextActivity)) then {
		jumps := OrderedSet{object EnrichedModel::Jump {
			nextState := self.nextActivity.late resolveone(EnrichedModel::State);
		}};
	} else {
		jumps := OrderedSet{};
	} endif;
}

query BasicModel::Activity::canJumpTo(nextActivity : BasicModel::Activity) : Boolean {
//	//Do not jump to an end activity (since it does not do anything anyway)
//	if (nextActivity.oclIsKindOf(BasicModel::End)) then {
//		return false;
//	} endif;
	
	//Only go to a join if we are currently in the thread that is supposed to join
	//Other threads terminate, so that the joining will actually eventually happen
	if (nextActivity.oclIsKindOf(BasicModel::Join)) then {
		return nextActivity.thread = self.thread;
	} endif;
	
	//Jump to the next activity in all other cases
	return true;
}

//Simple activity
mapping BasicModel::SimpleActivity::simpleActivity2state(m : EnrichedModel::Method) : EnrichedModel::MethodCallState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::SimpleActivity) }
{
	//Determine in which instance type (= class) the method must be placed
	var it = self.getInstanceType();
	
	//Determine whether a method with the same name already exists in that instance type 
	var methodsWithSameName := it.methods->select(e | e.name = self.activityName);
	
	if (methodsWithSameName->isEmpty()) {
		calledMethod := object EnrichedModel::Method {
			name := self.activityName;
			firstState := null;
			states := OrderedSet{};
			hasDynamicFirstState := false;
			parameters := self.lockedResources->resolve(EnrichedModel::SharedResource);
			lockedResources := self.lockedResources->resolve(EnrichedModel::SharedResource);
			isStatic := self.instanceType = null;
		};
		it.methods += calledMethod;
	} else {
		calledMethod := methodsWithSameName->first();
	} endif;
	
	firstState := null;
	
	if (self.instance != null) then {
		targetInstance := self.instance.resolveone(EnrichedModel::Instance); //Was created in the beginning
	} endif;
}

//Nested activity
mapping BasicModel::NestedActivity::nestedActivity2state(m : EnrichedModel::Method) : EnrichedModel::MethodCallState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::NestedActivity) }
{
	//Resolve late, because nested threads also transform states which access (non-existing) nested threads
	calledMethod := self.nestedThread.late resolveoneIn(BasicModel::NestedThread::nestedThread2method, EnrichedModel::Method);
	firstState := self.nestedThread.startActivity.late resolveone(EnrichedModel::State);
	
	if (self.nestedThread.startActivity.instance != null) {
		targetInstance := self.nestedThread.startActivity.instance.resolveone(EnrichedModel::Instance); //Was created in the beginning
	} endif;
}

mapping BasicModel::NestedThread::nestedThread2method() : EnrichedModel::Method {
	name := self.name;
	defaultFirstState := self.startActivity.late resolveone(EnrichedModel::State);
	hasDynamicFirstState := false;
	states := self.activities->map activity2state(result);
	parameters := self.futureReferences->late resolve(EnrichedModel::MethodParameter);
	lockedResources := self.lockedResources->resolve(EnrichedModel::SharedResource);
	isStatic := self.startActivity.instanceType = null;
	
	//Place the method in the instance type with the starting activity
	if (isStatic) then {
		defaultInstanceType.methods += result;
	} else {
		self.startActivity.getInstanceType().methods += result;
	} endif;
}

//Sleep
mapping BasicModel::Sleep::sleepActivity2state(m : EnrichedModel::Method) : EnrichedModel::SleepState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Sleep) }
{
	duration := self.duration;
}

//Yield
mapping BasicModel::Yield::yieldActivity2state(m : EnrichedModel::Method) : EnrichedModel::YieldState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Yield) }
{
	//Do nothing.
}

//Interrupt
mapping BasicModel::Interrupt::interruptActivity2state(m : EnrichedModel::Method) : EnrichedModel::InterruptState
	inherits BasicModel::LinearActivity::linearActivity2state
	when { self.oclIsKindOf(BasicModel::Interrupt) }
{
	interruptedThread := self.interruptedThread.late resolveoneIn(BasicModel::Thread::interruptableThread2thread, EnrichedModel::Thread);
	
	//If we cannot pass the interrupted thread to this state as a parameter, the thread must be made static
	if (self.siblingThreads->excludes(self.interruptedThread)) {
		staticThreads += self.interruptedThread;
	} endif;
}

//Decision
mapping BasicModel::Decision::decisionActivity2state(m : EnrichedModel::Method) : EnrichedModel::State
	when { self.oclIsKindOf(BasicModel::Decision) }
{
	method := m;
	jumps := self.branches->map branch2jump(self);
	
	if (self.canJumpTo(self.nextActivity)) then {
		jumps += object EnrichedModel::Jump {
			nextState := self.nextActivity.late resolveone(EnrichedModel::State);
		};
	} endif;
}

mapping BasicModel::Branch::branch2jump(decision : BasicModel::Decision) : EnrichedModel::Jump {
	condition := self.condition;
	
	if (decision.canJumpTo(self.nextActivity)) {
		nextState := self.nextActivity.late resolveone(EnrichedModel::State);
	} endif;
}

//Fork
mapping BasicModel::Fork::forkActivity2state(m : EnrichedModel::Method) : EnrichedModel::ForkState
	when { self.oclIsKindOf(BasicModel::Fork) }
{
	method := m;
	threadCount := self.maxThreadCount;
	threadInits := self.forkedThreadsUsingThreadInit->map forkedThread2threadInit(self);
	jumps := self.forkedThreadsUsingJump->map forkedThread2jump();
}

mapping BasicModel::ForkedThread::forkedThread2threadInit(fork : BasicModel::Fork) : EnrichedModel::ThreadInit {
	isAdopted := fork.adoptedForkedThread = self;
	isDaemon := self.daemon;
	targetInstance := self.startActivity.instance.map instance2instance();
	
	//Create the method that the forked thread will execute
	calledMethod := self.map forkedThread2method();
	
	//Place the thread method in the instance type with the starting activity
	if (calledMethod.isStatic) then {
		defaultInstanceType.methods += calledMethod; 
	} else {
		self.startActivity.getInstanceType().methods += calledMethod;
	} endif;
	
	//Create reference to the thread (so that is can be interrupted and joined with)
	thread := self.map interruptableThread2thread(fork.getInstanceType(), fork.isVisitedOnce);
}

mapping BasicModel::ForkedThread::forkedThread2method() : EnrichedModel::Method {
	name := self.name;
	defaultFirstState := self.startActivity.late resolveone(EnrichedModel::State);
	states := self.activities->map activity2state(result);
	parameters := self.startActivity.futureReferences->late resolve(EnrichedModel::MethodParameter);
	lockedResources := self.startActivity.lockedResources->resolve(EnrichedModel::SharedResource);
	isStatic := self.startActivity.instanceType = null;
}

mapping BasicModel::ForkedThread::forkedThread2jump() : EnrichedModel::Jump {
	nextState := self.startActivity.late resolveone(EnrichedModel::State);
}

mapping BasicModel::Thread::interruptableThread2thread(enclosingInstanceType : EnrichedModel::InstanceType, isVisitedOnce : Boolean) : EnrichedModel::Thread {
	name := self.name;
	instanceType := enclosingInstanceType;
	isMultiple := not isVisitedOnce;
	isStatic := false; //May be set to TRUE at the end of the transformation
}

//Join
mapping BasicModel::Join::joinActivity2state(m : EnrichedModel::Method) : EnrichedModel::JoinState
	when { self.oclIsKindOf(BasicModel::Join) }
{
	method := m;
	joinedThreads += self.incomingThreads->late resolveIn(BasicModel::Thread::interruptableThread2thread, EnrichedModel::Thread);
	
	//If we cannot pass the incoming threads to this state as a parameters, the incoming threads must be made static
	(self.incomingThreads - self.thread.GetSiblingThreads())->forEach(t) {
		staticThreads := staticThreads->including(t);
	};
	
	if (self.canJumpTo(self.nextActivity)) then {
		if (self.nextActivity.thread = self.thread) {
			//We stay in the same thread, so make a simple jump
			jumps := Sequence{object EnrichedModel::Jump {
				nextState := self.nextActivity.late resolveone(EnrichedModel::State);
			}};
		} else {
			//We want to call another method here, but we can only obtain this method
			//by late-resolving nextActivity and accessing its method field.
			//Since QVT does not like us accessing the field of a late-resolved object,
			//we do this at the very end of the transformation.
		} endif;
	} else {
		jumps := OrderedSet{};
	} endif;
}

